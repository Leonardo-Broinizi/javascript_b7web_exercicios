class Person {

    age = 0;

    constructor(name) {
        this.name = name;
    }

    sayHi() {
        console.log(`${this.name}  diz OI.`);
    }

}

class Student extends Person { // 'extends' √© a palavra-chave que transforma uma classe em 'filha' da outra (conceito de heran√ßa).
        constructor(name, id) {
        super(name); // 'super' √© o m√©todo que permite acessar as vari√°veis, fun√ß√µes e etc da classe 'pai'.
        this.id = id;
    }

    /* sayHi() { // Fun√ß√£o que sobreescreve a fun√ß√£o de mesmo nome da classe 'pai'.
        console.log(`${this.name} √© um estudante e diz OI.`);
    }*/

        sayHello() { // Fun√ß√£o que esta usando, atrav√©s do m√©todo 'super', uma fun√ß√£o da classe 'pai'.
            super.sayHi();
        }
}

let p1 = new Student("Leonardo");
p1.age = 33;

p1.sayHi();


// Texto explicativo do tema gerado pelo ChatGPT:

/* 

A **heran√ßa** em **Programa√ß√£o Orientada a Objetos (POO)** √© um conceito que permite que uma classe (chamada de **classe filha** ou **subclasse**) herde as propriedades e m√©todos de outra classe (chamada de **classe pai** ou **superclasse**). Isso promove o **reuso de c√≥digo** e a **especializa√ß√£o** de classes.

Em JavaScript, a heran√ßa √© implementada usando a palavra-chave `extends` e, quando necess√°rio, o m√©todo `super()` para acessar ou inicializar a classe pai.

---

### **Por que usar heran√ßa?**
1. **Reutilizar c√≥digo:** M√©todos e propriedades comuns podem ser definidos na classe pai e reutilizados nas subclasses.
2. **Especializar comportamentos:** A subclasse pode **adicionar** ou **sobrescrever** funcionalidades espec√≠ficas da classe pai.
3. **Organizar melhor o c√≥digo:** Ajuda a modelar rela√ß√µes do tipo "√© um" (exemplo: "Cachorro √© um Animal").

---

### **Exemplo B√°sico de Heran√ßa em JavaScript**

Vamos criar uma classe base chamada `Animal` e uma classe filha chamada `Cachorro` que herda dela:

```javascript
// Classe Pai (Superclasse)
class Animal {
  constructor(nome) {
    this.nome = nome;
  }

  fazerSom() {
    console.log("O animal faz um som.");
  }
}

// Classe Filha (Subclasse)
class Cachorro extends Animal {
  fazerSom() {
    console.log("O cachorro late: Au au!");
  }
}

const animal = new Animal("Gen√©rico");
animal.fazerSom(); // "O animal faz um som."

const cachorro = new Cachorro("Rex");
cachorro.fazerSom(); // "O cachorro late: Au au!"
```

---

### **Como funciona a heran√ßa em JavaScript?**

1. **Palavra-chave `extends`:**
   - Usada para declarar que uma classe herda de outra.
   - Exemplo:
     ```javascript
     class Subclasse extends Superclasse { }
     ```

2. **Uso do `super()`:**
   - O m√©todo `super()` chama o constructor da classe pai.
   - √â **obrigat√≥rio** chamar `super()` no constructor da subclasse antes de usar o `this`.
   - Exemplo:
     ```javascript
     class Animal {
       constructor(nome) {
         this.nome = nome;
       }
     }

     class Gato extends Animal {
       constructor(nome, raca) {
         super(nome); // Chama o constructor da classe pai
         this.raca = raca; // Adiciona l√≥gica espec√≠fica da subclasse
       }
     }

     const gato = new Gato("Mia", "Siam√™s");
     console.log(gato.nome); // "Mia"
     console.log(gato.raca); // "Siam√™s"
     ```

3. **Sobrescrita de m√©todos (Method Overriding):**
   - Subclasses podem redefinir m√©todos da classe pai para modificar o comportamento.
   - Exemplo:
     ```javascript
     class Animal {
       fazerSom() {
         console.log("O animal faz um som.");
       }
     }

     class Cavalo extends Animal {
       fazerSom() {
         console.log("O cavalo relincha: Ihiiiii!");
       }
     }

     const cavalo = new Cavalo();
     cavalo.fazerSom(); // "O cavalo relincha: Ihiiiii!"
     ```

4. **Acesso a m√©todos da classe pai:**
   - M√©todos da superclasse podem ser acessados explicitamente usando `super`.
   - Exemplo:
     ```javascript
     class Animal {
       fazerSom() {
         console.log("O animal faz um som.");
       }
     }

     class Cachorro extends Animal {
       fazerSom() {
         super.fazerSom(); // Chama o m√©todo da classe pai
         console.log("O cachorro late: Au au!");
       }
     }

     const cachorro = new Cachorro();
     cachorro.fazerSom();
     // "O animal faz um som."
     // "O cachorro late: Au au!"
     ```

---

### **Vantagens da Heran√ßa**

1. **Reuso de c√≥digo:** Voc√™ pode definir m√©todos comuns na superclasse e reutiliz√°-los nas subclasses.
2. **Especializa√ß√£o:** As subclasses podem adicionar ou sobrescrever funcionalidades espec√≠ficas sem duplicar c√≥digo.
3. **Organiza√ß√£o l√≥gica:** Facilita a modelagem de hierarquias e a manuten√ß√£o do c√≥digo.

---

### **Quando evitar heran√ßa?**
Embora a heran√ßa seja poderosa, nem sempre √© a melhor solu√ß√£o. Considere evitar a heran√ßa quando:
- A rela√ß√£o entre as classes n√£o √© uma rela√ß√£o "√© um" (exemplo: "Carro √© um Animal" n√£o faz sentido).
- A hierarquia de classes pode ficar muito complexa e dif√≠cil de manter.
- O comportamento compartilhado pode ser melhor implementado com **composi√ß√£o** (usando objetos ou fun√ß√µes reutiliz√°veis em vez de subclasses).

---

### **Resumo**
- **Heran√ßa** √© um mecanismo de reuso de c√≥digo que permite que uma classe herde as propriedades e m√©todos de outra.
- Use `extends` para definir heran√ßa e `super()` para acessar ou inicializar a classe pai.
- Sobrescreva m√©todos quando precisar personalizar comportamentos na subclasse.
- √â uma ferramenta poderosa, mas deve ser usada com cuidado para evitar hierarquias excessivamente complexas.

Se precisar de mais exemplos ou tiver d√∫vidas, √© s√≥ perguntar! üòä

*/