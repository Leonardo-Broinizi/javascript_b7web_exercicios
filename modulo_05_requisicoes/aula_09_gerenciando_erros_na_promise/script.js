

// https://jsonplaceholder.typicode.com/todos

function clicou() {
    fetch('https://jsonplaceholder.typicode.com/todos')
        .then((response) => {
            return response.json();
        })
        .then((json) => {
            alert(`Titulo do primeiro post: ${json[0].title}`)
        })
        .catch((error) => {
            alert("Deu problema na requisi√ß√£o!");
            console.log(`Mensagem de erro: ${error}`);
        })
        .finally(() => {
            alert('Fim do processo de requisi√ß√£o.')
        });
}


document.querySelector('#botao').addEventListener('click', clicou);



/* 
// Meu entendimento: 


// Texto Gerado pelo ChatGPT sobre o tema da aula: 



// Outras d√∫vidas tiradas com o ChatGPT sobre o tema: 

Com base nesse c√≥digo [o c√≥digo da aula] me ensine sobre o seguinte: eu acho que o argumento (ou par√¢metro, n√£o estou certo de como devo nome√°-lo corretamente) que vem no callback quando eu nomeio (nesses casos, 'response', 'json' e 'error') s√£o argumentos (ou par√¢metros) autom√°ticos que os m√©todos .then e .catch fornecem caso eu nomeie algo dentro dos par√™ntesis das callbacks. Meu racioc√≠nio est√° correto? Me ajude a 'clarear' mais essas ideias.
O ChatGPT disse:
ChatGPT
Seu racioc√≠nio est√° no caminho certo, mas vamos detalhar melhor para deixar claro:

Par√¢metros autom√°ticos nas callbacks:
Sim, quando voc√™ usa .then ou .catch, o valor passado como argumento para a fun√ß√£o callback (como response, json ou error) √© fornecido automaticamente pelo m√©todo .then ou .catch, com base no que aconteceu anteriormente na cadeia de Promises.

No caso do primeiro .then, o argumento (neste caso, response) √© o objeto que representa a resposta do fetch.
No segundo .then, o argumento (aqui json) √© o valor retornado pela Promise anterior, ou seja, o que response.json() resolveu.
No .catch, o argumento (neste caso, error) representa qualquer erro que tenha ocorrido durante a execu√ß√£o da Promise, seja no fetch, no .then, ou at√© em outro lugar na cadeia.
Esses par√¢metros s√£o "autom√°ticos"?
Sim, no sentido de que voc√™ n√£o precisa explicitamente defini-los ao usar .then ou .catch. O m√©todo automaticamente fornece o valor correspondente para a callback que voc√™ definir. No entanto, o nome que voc√™ d√° ao par√¢metro (por exemplo, response, json, error) √© algo que voc√™ escolhe. Ele serve apenas para identificar o valor passado e facilitar sua manipula√ß√£o.

Por que isso acontece?
A l√≥gica est√° embutida na implementa√ß√£o da classe Promise. O .then e o .catch esperam fun√ß√µes como argumento (callbacks), e eles chamam essas fun√ß√µes passando como argumento o valor que a Promise resolve ou o erro que ela rejeita. Por isso, o que voc√™ escreve dentro dos par√™nteses √© um "r√≥tulo" para acessar esse valor.

Para clarear mais:
Vamos reorganizar o racioc√≠nio com foco nos m√©todos:

.then(callback):
A fun√ß√£o callback recebe como par√¢metro o valor resolvido da Promise anterior.
Exemplo no seu c√≥digo:

No primeiro .then, response √© o valor resolvido pela Promise do fetch.
No segundo .then, json √© o valor resolvido pelo m√©todo response.json().
.catch(callback):
A fun√ß√£o callback recebe como par√¢metro o erro lan√ßado ou rejeitado em qualquer parte da cadeia de Promises.

Os par√¢metros (response, json, error) s√£o "entregues" automaticamente pelas Promises, mas voc√™ escolhe o nome para us√°-los.

Se algo n√£o ficou claro, √© s√≥ perguntar! üòä

*/