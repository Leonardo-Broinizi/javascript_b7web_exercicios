function somar_com_funcao_tradicional(a, b) {
    return a + b;
}

let somar_com_funcao_dentro_de_variavel = function (a, b) {
    return a + b;
}

const somar_com_arrow_funcion_forma_comprida_com_colchetes = (a, b) => {
    return a + b
};

const somar_com_arrow_function_forma_resumida_sem_colchetes = (x, y) => x + y;

const arrow_function_de_apenas_um_parametro = (nome) => nome.length;
const contador_de_letras_com_arrow_ainda_menor = nome =>  nome.length;

console.log(somar_com_funcao_tradicional(12, 24),
somar_com_funcao_dentro_de_variavel(2, 4), 
somar_com_arrow_funcion_forma_comprida_com_colchetes(5, 10),
somar_com_arrow_function_forma_resumida_sem_colchetes(3,4), 
somar_com_funcao_dentro_de_variavel(4,4), arrow_function_de_apenas_um_parametro('Leonardo Broinizi de Farias'), contador_de_letras_com_arrow_ainda_menor('Broinizi'));


// Aula sobre Arrow Functions criada pelo ChatGPT: 

/*

### **Aula sobre Arrow Functions**

Bem-vindos Ã  aula sobre **Arrow Functions**, um dos conceitos mais interessantes e prÃ¡ticos do JavaScript moderno! Hoje vamos aprender **o que sÃ£o**, **como usÃ¡-las** e **quando utilizÃ¡-las**.

---

### **1. O que sÃ£o Arrow Functions?**
As **Arrow Functions** sÃ£o uma forma mais curta e moderna de escrever funÃ§Ãµes em JavaScript, introduzida no ES6 (2015). Elas sÃ£o especialmente Ãºteis para situaÃ§Ãµes onde vocÃª precisa de funÃ§Ãµes simples e rÃ¡pidas, como callbacks.

Vamos comparar:
- Forma **tradicional**:
  ```javascript
  function soma(a, b) {
    return a + b;
  }
  ```
- Forma com **Arrow Function**:
  ```javascript
  const soma = (a, b) => a + b;
  ```

Elas fazem exatamente a mesma coisa! PorÃ©m, a Arrow Function Ã© mais **concisa** e tem algumas diferenÃ§as importantes que veremos mais Ã  frente.

---

### **2. Sintaxe das Arrow Functions**
A estrutura bÃ¡sica de uma Arrow Function Ã©:
```javascript
(parÃ¢metros) => expressÃ£o
```

#### Exemplos:
1. FunÃ§Ã£o que soma dois nÃºmeros:
   ```javascript
   const soma = (a, b) => a + b;
   ```
   Aqui:
   - `(a, b)` sÃ£o os **parÃ¢metros**.
   - `a + b` Ã© a **expressÃ£o** que serÃ¡ retornada.

2. FunÃ§Ã£o sem parÃ¢metros:
   ```javascript
   const digaOi = () => "OlÃ¡!";
   ```

3. FunÃ§Ã£o com mais de uma linha (uso de `{}` e `return`):
   ```javascript
   const soma = (a, b) => {
     console.log("Somando...");
     return a + b;
   };
   ```
   Quando o corpo da funÃ§Ã£o tem **vÃ¡rias linhas**, vocÃª precisa usar `{}` e escrever `return` explicitamente.

---

### **3. DiferenÃ§as das Arrow Functions**
As Arrow Functions tÃªm algumas particularidades em relaÃ§Ã£o Ã s funÃ§Ãµes tradicionais:

#### a) **Retorno implÃ­cito**
- Quando a funÃ§Ã£o tem apenas uma **expressÃ£o**, o retorno Ã© automÃ¡tico (implÃ­cito), sem necessidade de escrever `return`:
  ```javascript
  const quadrado = x => x * x;
  console.log(quadrado(4)); // 16
  ```

#### b) **Sintaxe simplificada**
- Se hÃ¡ **apenas um parÃ¢metro**, os parÃªnteses sÃ£o opcionais:
  ```javascript
  const dobro = x => x * 2;
  ```
- Se nÃ£o hÃ¡ parÃ¢metros, vocÃª precisa usar `()`, mas continua mais curto:
  ```javascript
  const digaOi = () => "Oi!";
  ```

#### c) **NÃ£o tÃªm `this` prÃ³prio**
- Aqui estÃ¡ uma diferenÃ§a crucial: **Arrow Functions nÃ£o criam um novo contexto para o `this`**. Elas "herdam" o valor de `this` do local onde foram definidas. Isso as torna ideais para mÃ©todos ou callbacks onde vocÃª quer que o `this` continue apontando para o objeto original.

Exemplo:
```javascript
function Pessoa(nome) {
  this.nome = nome;

  // FunÃ§Ã£o tradicional
  this.digaOiTradicional = function () {
    console.log(`Oi, meu nome Ã© ${this.nome}`);
  };

  // Arrow Function
  this.digaOiArrow = () => {
    console.log(`Oi, meu nome Ã© ${this.nome}`);
  };
}

const maria = new Pessoa("Maria");
maria.digaOiTradicional(); // "Oi, meu nome Ã© Maria"
maria.digaOiArrow();       // "Oi, meu nome Ã© Maria"
```

Se usÃ¡ssemos uma funÃ§Ã£o tradicional em outro contexto, o `this` poderia ser perdido:
```javascript
const digaOiTradicional = maria.digaOiTradicional;
digaOiTradicional(); // Erro ou `this.nome` Ã© undefined

const digaOiArrow = maria.digaOiArrow;
digaOiArrow(); // "Oi, meu nome Ã© Maria" (Arrow Function mantÃ©m o `this`)
```

---

### **4. Exemplos prÃ¡ticos de uso**
Vamos ver onde as Arrow Functions brilham no dia a dia:

#### a) Usando em callbacks
```javascript
const numeros = [1, 2, 3, 4];
const dobrados = numeros.map(n => n * 2); // [2, 4, 6, 8]
```

#### b) Simplificando funÃ§Ãµes de array
```javascript
const numeros = [10, 20, 30, 40];

// Filtrando nÃºmeros maiores que 20
const maioresQueVinte = numeros.filter(n => n > 20); // [30, 40]

// Somando todos os nÃºmeros
const somaTotal = numeros.reduce((total, n) => total + n, 0); // 100
```

#### c) Trabalhando com `setTimeout` e `setInterval`
```javascript
setTimeout(() => console.log("OlÃ¡ depois de 2 segundos"), 2000);
```

---

### **5. Quando nÃ£o usar Arrow Functions?**
Embora sejam Ãºteis, hÃ¡ momentos em que **nÃ£o sÃ£o ideais**:
1. **MÃ©todos de objetos**:
   ```javascript
   const pessoa = {
     nome: "Ana",
     digaOi: () => console.log(`Oi, meu nome Ã© ${this.nome}`) // `this` serÃ¡ undefined
   };
   pessoa.digaOi(); // "Oi, meu nome Ã© undefined"
   ```

   Nesse caso, uma funÃ§Ã£o tradicional seria melhor:
   ```javascript
   digaOi() {
     console.log(`Oi, meu nome Ã© ${this.nome}`);
   }
   ```

2. **FunÃ§Ãµes construtoras**:
   Arrow Functions nÃ£o podem ser usadas como construtoras:
   ```javascript
   const Pessoa = (nome) => {
     this.nome = nome;
   };
   const maria = new Pessoa("Maria"); // Erro
   ```

---

### **6. ExercÃ­cio para fixaÃ§Ã£o**
Tente resolver este exercÃ­cio:
```javascript
const pessoas = [
  { nome: "Ana", idade: 25 },
  { nome: "JoÃ£o", idade: 32 },
  { nome: "Maria", idade: 18 },
];

// Filtrar pessoas com idade maior que 20 usando Arrow Function.
const adultos = /* sua funÃ§Ã£o aqui */;
console.log(adultos);
```

---

### **Resumo**
- **Arrow Functions** sÃ£o uma forma moderna e concisa de escrever funÃ§Ãµes.
- Usam uma sintaxe simples: `(parÃ¢metros) => expressÃ£o`.
- SÃ£o ideais para callbacks, funÃ§Ãµes simples e quando vocÃª nÃ£o quer criar um novo `this`.
- NÃ£o devem ser usadas em mÃ©todos de objetos ou funÃ§Ãµes construtoras.

DÃºvidas? Vamos praticar juntos! ğŸš€

*/