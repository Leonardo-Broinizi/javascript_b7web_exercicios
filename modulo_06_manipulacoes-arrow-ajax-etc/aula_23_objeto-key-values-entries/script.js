/*
let lista = [1,2,3,4];
let lista1 = {
    nome: 'Leonardo',
    idade: 33
};

console.log(typeof lista, typeof lista1);


let lista2 = ['ovo', 'macarr√£o', 'feij√£o', 'pipoca'];

console.log(Object.keys(lista2));

console.log(Object.values(lista2));

console.log(Object.entries(lista2));

let entries = Object.entries(lista2);
console.log(entries[3]);

let pessoa = {
    nome: 'Bonieky',
    sobrenome: 'Lacerda', 
    idade:90
} 

console.log(Object.keys(pessoa));
console.log(Object.values(pessoa));
console.log(Object.entries(pessoa));

// Aula sobre M√©todos do Objeto 'Object' em JavaScript feita pelo ChatGPT: 

/* 

### **Aula sobre M√©todos do Objeto `Object` em JavaScript**

Bem-vindos √† aula sobre os m√©todos mais usados do objeto `Object` em JavaScript! üéì Hoje vamos aprender sobre **`Object.keys()`**, **`Object.values()`**, **`Object.entries()`**, entre outros, e como us√°-los para trabalhar com objetos de forma eficiente.

---

### **1. O que √© o `Object` em JavaScript?**
Em JavaScript, `Object` √© um construtor global para criar objetos e trabalhar com suas propriedades. Al√©m disso, ele oferece m√©todos √∫teis para manipular objetos, como acessar suas **chaves**, **valores** e **pares chave-valor**.

---

### **2. M√©todos principais**

#### **a) `Object.keys(obj)`**
Este m√©todo retorna um **array** contendo todas as **chaves** (propriedades) de um objeto.

**Sintaxe:**
```javascript
Object.keys(obj);
```

**Exemplo:**
```javascript
const pessoa = {
  nome: "Ana",
  idade: 25,
  profissao: "Desenvolvedora"
};

console.log(Object.keys(pessoa)); 
// Sa√≠da: ['nome', 'idade', 'profissao']
```

**Quando usar?**
- Quando voc√™ precisa listar todas as propriedades de um objeto, por exemplo, para criar dinamicamente uma interface.

---

#### **b) `Object.values(obj)`**
Este m√©todo retorna um **array** contendo todos os **valores** das propriedades de um objeto.

**Sintaxe:**
```javascript
Object.values(obj);
```

**Exemplo:**
```javascript
const pessoa = {
  nome: "Ana",
  idade: 25,
  profissao: "Desenvolvedora"
};

console.log(Object.values(pessoa)); 
// Sa√≠da: ['Ana', 25, 'Desenvolvedora']
```

**Quando usar?**
- Quando voc√™ precisa trabalhar apenas com os **valores** de um objeto, como som√°-los (se forem num√©ricos) ou exibi-los.

---

#### **c) `Object.entries(obj)`**
Este m√©todo retorna um **array de arrays**, onde cada sub-array cont√©m um par **chave-valor** do objeto.

**Sintaxe:**
```javascript
Object.entries(obj);
```

**Exemplo:**
```javascript
const pessoa = {
  nome: "Ana",
  idade: 25,
  profissao: "Desenvolvedora"
};

console.log(Object.entries(pessoa)); 
// Sa√≠da: [['nome', 'Ana'], ['idade', 25], ['profissao', 'Desenvolvedora']]
```

**Quando usar?**
- Quando voc√™ precisa manipular tanto as **chaves** quanto os **valores** de um objeto juntos.

#### **Iterando com `forEach`:**
```javascript
Object.entries(pessoa).forEach(([chave, valor]) => {
  console.log(`${chave}: ${valor}`);
});
// Sa√≠da:
// nome: Ana
// idade: 25
// profissao: Desenvolvedora
```

---

### **3. Outros m√©todos √∫teis**

#### **a) `Object.assign(target, source)`**
Este m√©todo copia todas as propriedades de um ou mais objetos para um objeto-alvo.

**Sintaxe:**
```javascript
Object.assign(alvo, ...origens);
```

**Exemplo:**
```javascript
const alvo = { a: 1 };
const origem = { b: 2, c: 3 };

Object.assign(alvo, origem);
console.log(alvo);
// Sa√≠da: { a: 1, b: 2, c: 3 }
```

**Quando usar?**
- Para mesclar objetos ou fazer c√≥pias superficiais.

---

#### **b) `Object.freeze(obj)`**
Impede que novas propriedades sejam adicionadas ou que as existentes sejam alteradas no objeto.

**Exemplo:**
```javascript
const obj = { nome: "Ana" };
Object.freeze(obj);

obj.nome = "Jo√£o"; // N√£o faz nada
obj.sobrenome = "Silva"; // N√£o funciona
console.log(obj); 
// Sa√≠da: { nome: "Ana" }
```

**Quando usar?**
- Para tornar um objeto imut√°vel.

---

#### **c) `Object.seal(obj)`**
Semelhante ao `freeze`, mas permite alterar os valores das propriedades existentes, embora impe√ßa a adi√ß√£o ou remo√ß√£o de propriedades.

**Exemplo:**
```javascript
const obj = { nome: "Ana" };
Object.seal(obj);

obj.nome = "Jo√£o"; // Funciona
obj.sobrenome = "Silva"; // N√£o funciona
console.log(obj); 
// Sa√≠da: { nome: "Jo√£o" }
```

**Quando usar?**
- Para proteger a estrutura de um objeto, permitindo apenas altera√ß√µes em valores existentes.

---

### **4. Diferen√ßas entre os M√©todos**
| M√©todo              | Retorna                     | Uso Principal                                     |
|---------------------|-----------------------------|--------------------------------------------------|
| `Object.keys(obj)`   | Array de chaves             | Listar ou iterar sobre as propriedades           |
| `Object.values(obj)` | Array de valores            | Trabalhar com os valores do objeto               |
| `Object.entries(obj)`| Array de pares chave-valor  | Manipular ou iterar sobre pares chave-valor      |
| `Object.assign()`    | Objeto alvo modificado      | Copiar ou mesclar objetos                        |
| `Object.freeze()`    | O pr√≥prio objeto            | Impedir altera√ß√µes no objeto                     |
| `Object.seal()`      | O pr√≥prio objeto            | Permitir altera√ß√µes nos valores, mas n√£o na estrutura |

---

### **5. Exerc√≠cio para praticar**
Vamos praticar com um exerc√≠cio simples:

1. Dado o objeto:
   ```javascript
   const produto = {
     nome: "Notebook",
     preco: 3000,
     estoque: 50
   };
   ```

2. Fa√ßa o seguinte:
   - Liste todas as chaves do objeto.
   - Liste todos os valores do objeto.
   - Liste os pares chave-valor.
   - Crie um novo objeto copiando `produto` e adicionando uma propriedade `categoria` com o valor `"Eletr√¥nicos"`.

---

Se precisar de ajuda com o exerc√≠cio ou tiver d√∫vidas, √© s√≥ chamar! üöÄ

*/