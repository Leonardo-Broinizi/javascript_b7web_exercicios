### **Aula: C√≥digo S√≠ncrono vs C√≥digo Ass√≠ncrono em JavaScript** üöÄ

Ol√°, pessoal! Hoje vamos falar sobre um dos conceitos mais importantes (e √†s vezes confusos) da programa√ß√£o em **JavaScript**: **c√≥digo s√≠ncrono vs c√≥digo ass√≠ncrono**. Entender essa diferen√ßa √© essencial para lidar com tarefas que **demoram a ser executadas**, como acessar dados de uma API, ler arquivos ou esperar a√ß√µes do usu√°rio.

---

## **1. O que √© C√≥digo S√≠ncrono?**

**C√≥digo s√≠ncrono** √© executado **de cima para baixo**, linha por linha, **bloqueando** o fluxo de execu√ß√£o at√© que a opera√ß√£o atual seja conclu√≠da.

### Caracter√≠sticas:
- Cada tarefa √© realizada **sequencialmente**.
- Uma linha de c√≥digo **espera** a anterior ser executada antes de prosseguir.
- Problemas podem surgir se uma opera√ß√£o demorar demais, pois o programa "trava" at√© que ela termine.

---

### **Exemplo de C√≥digo S√≠ncrono**
```javascript
console.log("Primeira tarefa");
console.log("Segunda tarefa");
console.log("Terceira tarefa");
```

#### **Sa√≠da:**
```
Primeira tarefa
Segunda tarefa
Terceira tarefa
```

Aqui, cada `console.log()` √© executado na ordem em que aparece.

---

### **Problema com o C√≥digo S√≠ncrono**
Imagine que temos uma opera√ß√£o demorada, como ler um arquivo ou buscar dados em um servidor:

```javascript
function tarefaDemorada() {
  for (let i = 0; i < 1e9; i++) {} // Simula uma tarefa demorada
}

console.log("In√≠cio");
tarefaDemorada();
console.log("Fim");
```

#### **Sa√≠da:**
```
In√≠cio
Fim (depois de um longo atraso)
```

Nesse caso, o c√≥digo **bloqueia** o restante da execu√ß√£o at√© que a tarefa demorada termine. Isso √© problem√°tico em aplica√ß√µes que precisam continuar funcionando sem travar.

---

## **2. O que √© C√≥digo Ass√≠ncrono?**

**C√≥digo ass√≠ncrono** permite que o programa **continue executando** outras tarefas enquanto espera a conclus√£o de uma opera√ß√£o mais demorada.

### Caracter√≠sticas:
- N√£o bloqueia o fluxo de execu√ß√£o.
- Permite que opera√ß√µes "lentas" rodem em segundo plano.
- Muito usado em tarefas como requisi√ß√µes HTTP, leitura de arquivos e temporizadores.

---

### **Exemplo de C√≥digo Ass√≠ncrono**
Em JavaScript, fun√ß√µes ass√≠ncronas s√£o comuns ao usar **`setTimeout`**, **Promises**, ou **async/await**.

```javascript
console.log("In√≠cio");

setTimeout(() => {
  console.log("Tarefa ass√≠ncrona conclu√≠da");
}, 2000); // Espera 2 segundos

console.log("Fim");
```

#### **Sa√≠da:**
```
In√≠cio
Fim
Tarefa ass√≠ncrona conclu√≠da
```

### O que aconteceu?
1. **`setTimeout`** agenda a execu√ß√£o da fun√ß√£o de callback para depois de 2 segundos.
2. O JavaScript continua executando o restante do c√≥digo (a linha `console.log("Fim")`).
3. Ap√≥s 2 segundos, a fun√ß√£o dentro do `setTimeout` √© executada.

---

## **3. A Event Loop: O cora√ß√£o do Ass√≠ncrono no JS**
O JavaScript usa um modelo chamado **Event Loop** para lidar com tarefas ass√≠ncronas. Funciona assim:

1. **Call Stack**: Onde as fun√ß√µes s√£o executadas (s√≠ncronas).
2. **Web APIs**: Executam tarefas ass√≠ncronas (ex.: `setTimeout` ou `fetch`).
3. **Task Queue**: Onde as fun√ß√µes ass√≠ncronas aguardam para serem colocadas na Call Stack quando estiverem prontas.

### Resumo do Fluxo:
- O c√≥digo s√≠ncrono √© executado **imediatamente** na Call Stack.
- O c√≥digo ass√≠ncrono (ex.: temporizadores ou chamadas a servidores) √© enviado para as **Web APIs** e fica aguardando.
- Quando a tarefa ass√≠ncrona √© conclu√≠da, ela √© movida para a **Task Queue**.
- O **Event Loop** verifica se a Call Stack est√° vazia e, ent√£o, move as tarefas da Task Queue para a Call Stack.

---

## **4. Trabalhando com Ass√≠ncrono: Promises e async/await**

### **Promises**
As Promises s√£o usadas para lidar com c√≥digo ass√≠ncrono de forma mais organizada.

**Exemplo:**
```javascript
const minhaPromise = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve("Tarefa conclu√≠da!");
  }, 2000);
});

console.log("In√≠cio");

minhaPromise.then((resultado) => {
  console.log(resultado);
});

console.log("Fim");
```

#### **Sa√≠da:**
```
In√≠cio
Fim
Tarefa conclu√≠da!
```

- **`resolve`** indica que a tarefa foi conclu√≠da com sucesso.
- O `.then()` √© usado para executar algo ap√≥s a conclus√£o da Promise.

---

### **Async/Await**: Uma forma mais simples de lidar com Promises
`async/await` torna o c√≥digo ass√≠ncrono mais leg√≠vel, parecendo s√≠ncrono.

**Exemplo:**
```javascript
function esperar() {
  return new Promise((resolve) => {
    setTimeout(() => resolve("Tarefa conclu√≠da!"), 2000);
  });
}

async function executar() {
  console.log("In√≠cio");
  const resultado = await esperar();
  console.log(resultado);
  console.log("Fim");
}

executar();
```

#### **Sa√≠da:**
```
In√≠cio
Tarefa conclu√≠da!
Fim
```

### O que aconteceu?
1. A fun√ß√£o `executar` √© ass√≠ncrona.
2. A palavra-chave **`await`** pausa a execu√ß√£o da fun√ß√£o at√© a Promise ser resolvida.
3. O c√≥digo **fora** da fun√ß√£o `executar` continua sendo executado normalmente.

---

## **5. Diferen√ßa entre S√≠ncrono e Ass√≠ncrono**

| **C√≥digo S√≠ncrono**                      | **C√≥digo Ass√≠ncrono**                  |
|-----------------------------------------|----------------------------------------|
| Executa linha por linha, bloqueando.     | N√£o bloqueia; executa em segundo plano.|
| Bom para tarefas r√°pidas e simples.      | Ideal para tarefas demoradas (ex.: I/O).|
| Pode travar a aplica√ß√£o.                 | Mant√©m a aplica√ß√£o responsiva.         |

---

## **6. Exerc√≠cio para Fixa√ß√£o**
1. Crie um c√≥digo que simule:
   - Uma tarefa **s√≠ncrona** que demora 3 segundos (use um `for` gigante, como fizemos antes).
   - Uma tarefa **ass√≠ncrona** com `setTimeout` de 2 segundos.
2. Mostre no console a ordem de execu√ß√£o.

---

## **Conclus√£o**
- C√≥digo **s√≠ncrono** executa tarefas de forma sequencial e bloqueante.
- C√≥digo **ass√≠ncrono** permite executar tarefas demoradas sem bloquear o fluxo principal.
- Ferramentas como **`setTimeout`**, **Promises** e **async/await** facilitam o uso de c√≥digo ass√≠ncrono em JavaScript.

D√∫vidas? Vamos praticar juntos! üöÄ