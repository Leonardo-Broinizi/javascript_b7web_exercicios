/* ## **6. Exerc√≠cio para Fixa√ß√£o**
1. Crie um c√≥digo que simule:
- Uma tarefa **s√≠ncrona** que demora 3 segundos (use um `for` gigante, como fizemos antes).
- Uma tarefa **ass√≠ncrona** com `setTimeout` de 2 segundos.
2. Mostre no console a ordem de execu√ß√£o. */ 


console.log("In√≠cio");

setTimeout(() => {
    console.log("Tarefa ass√≠ncrona conclu√≠da");
}, 3000);

console.log("Fim");

/*

An√°lise do ChatGPT: Sua resolu√ß√£o est√° **correta** e demonstra perfeitamente o comportamento do **c√≥digo ass√≠ncrono** usando `setTimeout`. Vamos analisar o que acontece:

---

### **C√≥digo:**
```javascript
console.log("In√≠cio");

setTimeout(() => {
    console.log("Tarefa ass√≠ncrona conclu√≠da");
}, 3000);

console.log("Fim");
```

---

### **An√°lise do Fluxo de Execu√ß√£o**
1. **`console.log("In√≠cio");`**
   - Imprime **"In√≠cio"** imediatamente no console.

2. **`setTimeout()`**
   - O JavaScript registra a fun√ß√£o de callback para ser executada ap√≥s **3 segundos**.
   - O temporizador √© configurado e o JavaScript **n√£o espera**. Ele continua executando o c√≥digo seguinte.

3. **`console.log("Fim");`**
   - Imprime **"Fim"** no console **antes** que a tarefa ass√≠ncrona termine.

4. Ap√≥s 3 segundos, o callback do `setTimeout` √© executado e imprime:
   - **"Tarefa ass√≠ncrona conclu√≠da"**.

---

### **Sa√≠da no Console:**
```
In√≠cio
Fim
Tarefa ass√≠ncrona conclu√≠da
```

---

### **Por que o resultado √© assim?**
- O **`setTimeout`** √© ass√≠ncrono e n√£o bloqueia o restante do c√≥digo.
- O JavaScript continua executando as linhas seguintes enquanto espera o tempo especificado no `setTimeout`.
- Quando os 3 segundos terminam, o **Event Loop** coloca a fun√ß√£o de callback na Call Stack para ser executada.

---

### **Conclus√£o**
Seu c√≥digo est√° perfeito! üéâ Ele demonstra claramente:
- O funcionamento ass√≠ncrono do `setTimeout`.
- A n√£o bloqueio do fluxo principal de execu√ß√£o.

Se quiser praticar mais, pode experimentar adicionar outros temporizadores com tempos diferentes para observar a ordem de execu√ß√£o! üöÄ

*/